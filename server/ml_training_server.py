#!/usr/bin/env python3
"""
ML Training Data Server –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç Send Learn –ø–ª–∞–≥–∏–Ω–∞
"""

import socket
import struct
import threading
import time
import json
import os
from datetime import datetime
from typing import Dict, List, Optional

class SendLearnServer:
    def __init__(self, host='0.0.0.0', port=8080):
        self.host = host
        self.port = port
        self.running = False
        self.clients = {}
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            'packets_received': 0,
            'bytes_received': 0,
            'clients_connected': 0,
            'errors': 0
        }
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
        self.data_dir = "collected_data"
        os.makedirs(self.data_dir, exist_ok=True)
        
    def start_server(self):
        """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞"""
        self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        
        try:
            self.socket.bind((self.host, self.port))
            self.socket.listen(5)
            self.running = True
            
            print(f"üöÄ Send Learn Server started on {self.host}:{self.port}")
            print(f"üìÅ Data directory: {self.data_dir}")
            
            while self.running:
                try:
                    client_socket, address = self.socket.accept()
                    print(f"üîó Client connected: {address}")
                    
                    client_thread = threading.Thread(
                        target=self.handle_client,
                        args=(client_socket, address)
                    )
                    client_thread.daemon = True
                    client_thread.start()
                    
                    self.stats['clients_connected'] += 1
                    
                except socket.error as e:
                    if self.running:
                        print(f"‚ùå Connection error: {e}")
                        
        except Exception as e:
            print(f"‚ùå Server error: {e}")
        finally:
            self.cleanup()
            
    def handle_client(self, client_socket, address):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞"""
        client_id = f"{address[0]}:{address[1]}"
        
        try:
            while self.running:
                # –ß–∏—Ç–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–∞–∫–µ—Ç–∞
                header_data = self.receive_exact(client_socket, 24)
                if not header_data:
                    break
                    
                # –ü–∞—Ä—Å–∏–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                magic, packet_type, data_size, timestamp, seq_num, checksum = struct.unpack('<IIIQI I', header_data)
                
                if magic != 0x53454E44:  # "SEND"
                    continue
                    
                # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                packet_data = self.receive_exact(client_socket, data_size)
                if not packet_data:
                    break
                    
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∞–∫–µ—Ç
                self.process_packet(packet_type, packet_data, client_id)
                self.stats['packets_received'] += 1
                self.stats['bytes_received'] += len(header_data) + len(packet_data)
                
        except Exception as e:
            print(f"‚ùå Client error {client_id}: {e}")
            self.stats['errors'] += 1
        finally:
            client_socket.close()
            print(f"üîå Client disconnected: {client_id}")
            
    def receive_exact(self, sock, size):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ—á–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±–∞–π—Ç"""
        data = b''
        while len(data) < size:
            chunk = sock.recv(size - len(data))
            if not chunk:
                return None
            data += chunk
        return data
        
    def process_packet(self, packet_type, data, client_id):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–∫–µ—Ç–∞"""
        if packet_type == 1:  # Handshake
            print(f"ü§ù Handshake from {client_id}")
        elif packet_type == 2:  # MIDI + Audio data
            self.process_data_packet(data, client_id)
        elif packet_type == 3:  # Heartbeat
            pass
            
    def process_data_packet(self, data, client_id):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–∫–µ—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏"""
        try:
            # –ü—Ä–æ—Å—Ç–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ø–æ–ª–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥)
            timestamp = time.time()
            print(f"üìä Data packet from {client_id}: {len(data)} bytes")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            filename = f"{self.data_dir}/data_{client_id.replace(':', '_')}_{int(timestamp)}.bin"
            with open(filename, 'wb') as f:
                f.write(data)
                
        except Exception as e:
            print(f"‚ùå Data processing error: {e}")
            
    def print_stats(self):
        """–í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        print("\n" + "="*50)
        print("üìä SERVER STATISTICS")
        print("="*50)
        print(f"Packets received: {self.stats['packets_received']}")
        print(f"Bytes received: {self.stats['bytes_received']:,}")
        print(f"Clients connected: {self.stats['clients_connected']}")
        print(f"Errors: {self.stats['errors']}")
        print("="*50)
        
    def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        self.running = False
        if hasattr(self, 'socket'):
            self.socket.close()
        print("üõë Server stopped")

def main():
    import argparse
    
    parser = argparse.ArgumentParser(description='Send Learn ML Training Server')
    parser.add_argument('--host', default='0.0.0.0', help='Host address')
    parser.add_argument('--port', type=int, default=8080, help='Port number')
    
    args = parser.parse_args()
    
    server = SendLearnServer(args.host, args.port)
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        server_thread = threading.Thread(target=server.start_server)
        server_thread.daemon = True
        server_thread.start()
        
        print("Press Ctrl+C to stop the server")
        print("Commands: 'stats' - show statistics, 'quit' - exit")
        
        while True:
            try:
                command = input("> ").strip().lower()
                if command == 'stats':
                    server.print_stats()
                elif command == 'quit':
                    break
                elif command == 'help':
                    print("Available commands: stats, quit, help")
            except EOFError:
                break
                
    except KeyboardInterrupt:
        pass
    finally:
        server.cleanup()
        print("üëã Goodbye!")

if __name__ == "__main__":
    main()
