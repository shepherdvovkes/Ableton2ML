#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Send Learn —Å–µ—Ä–≤–µ—Ä–∞
"""

import socket
import struct
import time

def test_connection():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É"""
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        print("üîó Connecting to Send Learn server...")
        sock.connect(('127.0.0.1', 8080))
        print("‚úÖ Connected!")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º handshake
        header = struct.pack('<IIIQI I', 
                           0x53454E44,  # magic "SEND"
                           1,           # packet type (handshake)
                           0,           # data size
                           int(time.time() * 1000),  # timestamp
                           1,           # sequence number
                           0)           # checksum
                           
        sock.send(header)
        print("ü§ù Handshake sent")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        test_data = b"Test data from Python client"
        data_header = struct.pack('<IIIQI I',
                                0x53454E44,     # magic
                                2,              # packet type (data)
                                len(test_data), # data size
                                int(time.time() * 1000),
                                2,              # sequence number
                                0)              # checksum
                                
        sock.send(data_header)
        sock.send(test_data)
        print(f"üìä Test data sent: {len(test_data)} bytes")
        
        time.sleep(1)
        print("‚úÖ Test completed successfully")
        
    except Exception as e:
        print(f"‚ùå Error: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    test_connection()
